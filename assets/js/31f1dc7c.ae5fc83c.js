(self.webpackChunksingularity_web=self.webpackChunksingularity_web||[]).push([[64],{6737:function(e,t,n){"use strict";n.r(t),n.d(t,{frontMatter:function(){return s},metadata:function(){return o},toc:function(){return l},default:function(){return p}});var i=n(2122),a=n(9756),r=(n(7294),n(3905)),s={id:"security",title:"Container Security"},o={unversionedId:"security",id:"security",isDocsHomePage:!1,title:"Container Security",description:"Containers are all the rage today for many good reasons. They are light weight, easy to spin-up and require reduced IT management resources as compared to hardware VM environments. More importantly, container technology facilitates advanced research computing by granting the ability to package software in highly portable and reproducible environments encapsulating all dependencies, including the operating system. But there are still some challenges to container security.",source:"@site/docs-admin/security.md",sourceDirName:".",slug:"/security",permalink:"/docs-admin/security",editUrl:"https://github.com/hpcng/singularity-web/edit/main/docs-admin/security.md",version:"current",frontMatter:{id:"security",title:"Container Security"},sidebar:"someSidebar",previous:{title:"User Namespaces & Fakeroot",permalink:"/docs-admin/user_namespace"},next:{title:"Appendix",permalink:"/docs-admin/appendix"}},l=[],u={toc:l};function p(e){var t=e.components,n=(0,a.Z)(e,["components"]);return(0,r.kt)("wrapper",(0,i.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"Containers are all the rage today for many good reasons. They are light weight, easy to spin-up and require reduced IT management resources as compared to hardware VM environments. More importantly, container technology facilitates advanced research computing by granting the ability to package software in highly portable and reproducible environments encapsulating all dependencies, including the operating system. But there are still some challenges to container security. "),(0,r.kt)("p",null,"Singularity, which is a container paradigm created by necessity for scientific and application driven workloads, addresses some\ncore missions of containers : Mobility of Compute, Reproducibility, HPC support, and ",(0,r.kt)("strong",{parentName:"p"},"Security"),". This document intends to inform\nadmins of different security features supported by Singularity."),(0,r.kt)("p",null,"Singularity Runtime\n###################"),(0,r.kt)("p",null,"The Singularity runtime enforces a unique security model that makes it appropriate for ",(0,r.kt)("em",{parentName:"p"},"untrusted users")," to run ",(0,r.kt)("em",{parentName:"p"},"untrusted containers"),"\nsafely on multi-tenant resources. Because the Singularity runtime dynamically writes UID and GID information to the appropriate files\nwithin the container, the user remains the same ",(0,r.kt)("em",{parentName:"p"},"inside")," and ",(0,r.kt)("em",{parentName:"p"},"outside")," the container, i.e., if you're an unprivileged\nuser while entering the container, you'll remain an unprivileged user inside the container. A privilege separation model is in place\nto prevent users from escalating privileges once they are inside of a container. The container file system is mounted using the\n",(0,r.kt)("inlineCode",{parentName:"p"},"nosuid")," option, and processes are spawned with the ",(0,r.kt)("inlineCode",{parentName:"p"},"PR_NO_NEW_PRIVS")," flag. Taken together, this approach provides a secure way\nfor users to run containers and greatly simplifies things like reading and writing data to the host system with appropriate\nownership."),(0,r.kt)("p",null,"It is also important to note that the philosophy of Singularity is ",(0,r.kt)("em",{parentName:"p"},"Integration")," over ",(0,r.kt)("em",{parentName:"p"},"Isolation"),". Most container run times strive\nto isolate your container from the host system and other containers as much as possible. Singularity, on the\nother hand, assumes that the user\u2019s primary goals are portability, reproducibility, and ease of use and that isolation is often a\ntertiary concern. Therefore, Singularity only isolates the mount namespace by default, and will also bind mount several host\ndirectories such as ",(0,r.kt)("inlineCode",{parentName:"p"},"$HOME")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"/tmp")," into the container at runtime. If needed, additional levels of isolation can be achieved\nby passing options causing Singularity to enter any or all of the other kernel namespaces and to prevent automatic bind mounting.\nThese measures allow users to interact with the host system from within the container in sensible ways."),(0,r.kt)("p",null,"Singularity Image Format (SIF)\n##############################"),(0,r.kt)("p",null,"Sylabs addresses container security as a continuous process. It attempts to provide container integrity throughout the distribution\npipeline.. i.e., at rest, in transit and while running. Hence, the SIF has been designed to achieve these goals. "),(0,r.kt)("p",null,"A SIF file is an immutable container runtime image. It is a physical representation of the container environment itself. An\nimportant component of SIF that elicits security feature is the ability to cryptographically sign a container, creating a signature\nblock within the SIF file which can guarantee immutability and provide accountability as to who signed it. Singularity follows the\n",(0,r.kt)("inlineCode",{parentName:"p"},"OpenPGP <https://www.openpgp.org/>"),"_ standard to create and manage these keys. After building an image within Singularity, users can\n",(0,r.kt)("inlineCode",{parentName:"p"},"singularity sign")," the container and push it to the Library along with its public PGP key(Stored in :ref:",(0,r.kt)("inlineCode",{parentName:"p"},"Keystore <keystore>"),") which\nlater can be verified (",(0,r.kt)("inlineCode",{parentName:"p"},"singularity verify"),") while pulling or downloading the image. This feature in particular\nprotects collaboration within and between systems and teams. "),(0,r.kt)("p",null,"SIF Encryption"),(0,r.kt)("hr",null),(0,r.kt)("p",null,"In Singularity 3.4 and above the container root filesystem that\nresides in the squashFS partition of a SIF can be encrypted, rendering\nit's contents inaccessible without a secret. Unlike other platforms,\nwhere encrypted layers must be assembled into an unencrypted runtime\ndirectory on disk, Singularity mounts the encrypted root file system\ndirectly from the SIF using Kernel dm-crypt/LUKS functionality, so\nthat the content is not exposed on disk. Singularity containers\nprovide a comparable level of security to LUKS2 full disk encryption\ncommonly deployed on Linux server and desktop systems."),(0,r.kt)("p",null,"As with all matters of security, a layered approach must be taken and\nthe system as a whole considered. For example, it is possible that\ndecrypted memory pages could be paged out the system swap file or\ndevice, which could result in decrypted information being stored at\nrest on physical media. Operating system level mitigations such as\nencrypted swap space may be required depending on the needs of your\napplication."),(0,r.kt)("p",null,"Encryption and decryption of containers requires ",(0,r.kt)("inlineCode",{parentName:"p"},"cryptsetup"),"\nversion 2. The SIF root filesystem will be encrypted using the\ndefault LUKS cipher on the host. The current default cipher used by\n",(0,r.kt)("inlineCode",{parentName:"p"},"cryptsetup")," for LUKS2 in mainstream Linux distributions is\n",(0,r.kt)("inlineCode",{parentName:"p"},"aes-xts-plain64")," with a 256 bit key size. The default key\nderivation function for LUKS2 is ",(0,r.kt)("inlineCode",{parentName:"p"},"argon2i"),"."),(0,r.kt)("p",null,"Singularity currently supports 2 types of secrets for encrypted\ncontainers:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("em",{parentName:"li"},"Passphrase"),": a text passphrase is passed directly to\n",(0,r.kt)("inlineCode",{parentName:"li"},"cryptsetup")," for LUKS encryption of the root fs."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("em",{parentName:"li"},"Asymmetric RSA keypair"),": a randomly generated 256-bit secret is\nused to perform LUKS encryption of the rootfs.  This secret is\nencrypted with a user-provided RSA public key, and the ciphertext\nstored in the SIF file. At runtime the RSA private key must be\nprovided to decrypt the secret and allow decryption of the root\nfilesystem to use the container.")),(0,r.kt)("p",null,".. note::"),(0,r.kt)("p",null,"   You can verify the default LUKS2 cipher and PBKDF on your system by\nrunning ",(0,r.kt)("inlineCode",{parentName:"p"},"cryptsetup --help"),"."),(0,r.kt)("p",null,"   ",(0,r.kt)("inlineCode",{parentName:"p"},"cryptsetup")," sets a memory cost for the ",(0,r.kt)("inlineCode",{parentName:"p"},"argon2i")," PBKDF based on\nthe RAM available in the system used for encryption, up to a\nmaximum of 1GiB. Encrypted containers created on systems with >2GiB\nRAM may be unusable on systems with <1GiB of free RAM."),(0,r.kt)("p",null,"Admin Configurable Files\n#########################"),(0,r.kt)("p",null,"Singularity Administrators have the ability to access various configuration files, that will let them set security\nrestrictions, grant or revoke a user\u2019s capabilities, manage resources and authorize containers etc. One such file interesting in this context is ",(0,r.kt)("inlineCode",{parentName:"p"},"ecl.toml <https://sylabs.io/guides/\\{adminversion\\}/admin-guide/configfiles.html#ecl-toml>"),"_\nwhich allows blacklisting and whitelisting of containers. You can find all the configuration files and their parameters\ndocumented ",(0,r.kt)("inlineCode",{parentName:"p"},"here <https://sylabs.io/guides/\\{adminversion\\}/admin-guide/configfiles.html>"),"__. "),(0,r.kt)("p",null,"cgroups support"),(0,r.kt)("hr",null),(0,r.kt)("p",null,"Starting v3.0, Singularity added native support for ",(0,r.kt)("inlineCode",{parentName:"p"},"cgroups"),", allowing users to limit the resources their containers consume\nwithout the help of a separate program like a batch scheduling system. This feature helps in preventing  DoS attacks where one\ncontainer seizes control of all available system resources in order to stop other containers from operating properly.\nTo utilize this feature, a user first creates a configuration file. An example configuration file is installed by default with\nSingularity to provide a guide. At runtime, the ",(0,r.kt)("inlineCode",{parentName:"p"},"--apply-cgroups")," option is used to specify the location of the configuration\nfile and cgroups are configured accordingly. More about cgroups support ",(0,r.kt)("inlineCode",{parentName:"p"},"here <https://sylabs.io/guides/\\{adminversion\\}/admin-guide/configfiles.html#cgroups-toml>"),"__."),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"--security")," options"),(0,r.kt)("hr",null),(0,r.kt)("p",null,"Singularity supports a number of methods for specifying the security scope and context when running Singularity containers.\nAdditionally, it supports new flags that can be passed to the action commands; ",(0,r.kt)("inlineCode",{parentName:"p"},"shell"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"exec"),", and ",(0,r.kt)("inlineCode",{parentName:"p"},"run")," allowing fine\ngrained control of security. Details about them are documented ",(0,r.kt)("inlineCode",{parentName:"p"},"here <https://sylabs.io/guides/\\{userversion\\}/user-guide/security_options.html>"),"__."),(0,r.kt)("p",null,"Security in SCS\n################"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"Singularity Container Services (SCS) <https://cloud.sylabs.io/home>"),"_ consist of a Remote Builder, a Container Library, and a\nKeystore. Taken together, the Singularity Container Services provide an end-to-end solution for packaging and distributing\napplications in secure and trusted containers."),(0,r.kt)("p",null,"Remote Builder"),(0,r.kt)("hr",null),(0,r.kt)("p",null,"As mentioned earlier, the Singularity runtime prevents executing code with root-level permissions on the host system. But building a\ncontainer requires elevated privileges that most production environments do not grant to users. ",(0,r.kt)("inlineCode",{parentName:"p"},"The Remote Builder <https://cloud.sylabs.io/builder>"),"_\nsolves this challenge by allowing unprivileged users a service that can be used to build containers targeting one or more CPU\narchitectures. System administrators can use the system to monitor which users are building containers, and the contents of those\ncontainers. Starting with Singularity 3.0, the CLI has native integration with the Build Service from version 3.0 onwards. In\naddition, a web GUI interface to the Build Service also exists, which allows users to build containers using only a web browser."),(0,r.kt)("p",null,".. note::"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"Please see the :ref:`Fakeroot feature <fakeroot>` which is a secure option for admins in multi-tenant HPC environments and \nsimilar use cases where they might want to grant a user special privileges inside a container.\n")),(0,r.kt)("p",null,"Container Library"),(0,r.kt)("hr",null),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"Container Library <https://cloud.sylabs.io/library>"),"_ enables users to store and share Singularity container images based on\nthe Singularity Image Format (SIF). A web front-end allows users to create new projects within the Container Library, edit\ndocumentation associated with container images, and discover container images published by their peers."),(0,r.kt)("p",null,".. _keystore:"),(0,r.kt)("p",null,"Key Store"),(0,r.kt)("hr",null),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"Key Store <https://cloud.sylabs.io/keystore>"),(0,r.kt)("em",{parentName:"p"}," is a key management system offered by Sylabs that utilizes ",(0,r.kt)("inlineCode",{parentName:"em"},"OpenPGP implementation <https://gnupg.org/>"))," to facilitate sharing and maintaining of PGP public keys used to sign and verify Singularity container images. This service is based on the OpenPGP HTTP Keyserver Protocol (HKP), with several enhancements:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"The Service requires connections to be secured with Transport Layer Security (TLS)."),(0,r.kt)("li",{parentName:"ul"},"The Service implements token-based authentication, allowing only authenticated users to add or modify PGP keys."),(0,r.kt)("li",{parentName:"ul"},"A web front-end allows users to view and search for PGP keys using a web browser.")),(0,r.kt)("p",null,"Security Considerations of Cloud Services:"),(0,r.kt)("hr",null),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Communications between users, the auth service and the above-mentioned services are secured via TLS.")),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"The services support authentication of users via authentication tokens.")),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"There is no implicit trust relationship between Auth and each of these services. Rather, each request between the services is authenticated using the authentication token supplied by the user in the associated request.")),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"The services support MongoDB authentication as well as TLS/SSL. "))),(0,r.kt)("p",null,".. note::"),(0,r.kt)("p",null,"   SingularityPRO is a professionally curated and licensed version of Singularity that provides added security, stability, and\nsupport beyond that offered by the open source project. Subscribers receive advanced access to security patches through regular\nupdates so, when a CVE is announced publicly PRO subscribers are already using patched software."),(0,r.kt)("p",null,"Security is not a check box that one can tick and forget.  It\u2019s an ongoing process that begins with software architecture, and\ncontinues all the way through to ongoing security practices.  In addition to ensuring that containers are run without elevated\nprivileges where appropriate, and that containers are produced by trusted sources, users must monitor their containers for newly\ndiscovered vulnerabilities and update when necessary just as they would with any other software. Sylabs is constantly probing to\nfind and patch vulnerabilities within Singularity, and will continue to do so."))}p.isMDXComponent=!0}}]);