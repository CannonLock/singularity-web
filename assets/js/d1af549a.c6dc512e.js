(self.webpackChunksingularity_web=self.webpackChunksingularity_web||[]).push([[79],{6063:function(e,t,n){"use strict";n.r(t),n.d(t,{frontMatter:function(){return o},metadata:function(){return s},toc:function(){return l},default:function(){return c}});var i=n(2122),r=n(9756),a=(n(7294),n(3905)),o={id:"security",title:"Security in Singularity"},s={unversionedId:"security",id:"security",isDocsHomePage:!1,title:"Security in Singularity",description:"Containers are popular for many good reasons. They are light weight,",source:"@site/docs-user/security.md",sourceDirName:".",slug:"/security",permalink:"/docs-user/security",editUrl:"https://github.com/hpcng/singularity-web/edit/main/docs-user/security.md",version:"current",frontMatter:{id:"security",title:"Security in Singularity"}},l=[{value:"Security Policy",id:"security-policy",children:[]},{value:"Singularity PRO - Long Term Support &amp; Security Patches",id:"singularity-pro---long-term-support--security-patches",children:[]},{value:"Singularity Runtime &amp; User Privilege",id:"singularity-runtime--user-privilege",children:[]},{value:"Singularity Image Format (SIF)",id:"singularity-image-format-sif",children:[]},{value:"Admin Configurable Files",id:"admin-configurable-files",children:[{value:"cgroups support",id:"cgroups-support",children:[]},{value:"<code>--security</code> options",id:"--security-options",children:[]}]},{value:"Security in the Sylabs Cloud",id:"security-in-the-sylabs-cloud",children:[{value:"Remote Builder",id:"remote-builder",children:[]},{value:"Container Library",id:"container-library",children:[]},{value:"Key Store",id:"key-store",children:[]},{value:"Authentication and encryption",id:"authentication-and-encryption",children:[]}]}],u={toc:l};function c(e){var t=e.components,n=(0,r.Z)(e,["components"]);return(0,a.kt)("wrapper",(0,i.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"Containers are popular for many good reasons. They are light weight,\neasy to spin-up and require reduced IT management resources as\ncompared to hardware VM environments. More importantly, container\ntechnology facilitates advanced research computing by granting the\nability to package software in highly portable and reproducible\nenvironments encapsulating all dependencies, including the operating\nsystem. But there are still some challenges to container security."),(0,a.kt)("p",null,"Singularity addresses some core missions of containers : Mobility of\nCompute, Reproducibility, HPC support, and ",(0,a.kt)("strong",{parentName:"p"},"Security"),". This section\ngives an overview of security features supported by Singularity,\nespecially where they differ from other container runtimes."),(0,a.kt)("h2",{id:"security-policy"},"Security Policy"),(0,a.kt)("p",null,"Security is not a check box that one can tick and forget.  Ensuring\nsecurity is a ongoing process that begins with software architecture,\nand continues all the way through to ongoing security practices.  In\naddition to ensuring that containers are run without elevated\nprivileges where appropriate, and that containers are produced by\ntrusted sources, users must monitor their containers for newly\ndiscovered vulnerabilities and update when necessary just as they\nwould with any other software. Sylabs is constantly probing to find\nand patch vulnerabilities within Singularity, and will continue to do\nso."),(0,a.kt)("p",null,"If you suspect you have found a vulnerability in Singularity, please\nfollow the steps in our published ",(0,a.kt)("inlineCode",{parentName:"p"},"Security Policy\n<https://sylabs.io/security-policy>"),"__."),(0,a.kt)("p",null,"so that it can be disclosed, investigated, and fixed in an appropriate\nmanner."),(0,a.kt)("h2",{id:"singularity-pro---long-term-support--security-patches"},"Singularity PRO - Long Term Support & Security Patches"),(0,a.kt)("p",null,"Security patches for Singularity are applied to the latest open-source\nversion, so it is important to follow new releases and upgrade when\nneccessary."),(0,a.kt)("p",null,"SingularityPRO is a professionally curated and licensed version of\nSingularity that provides added security, stability, and support\nbeyond that offered by the open source project. Security and bug-fix\npatches are backported to select versions of Singularity PRO, so that\nthey can be deployed long-term where required. PRO users receive\nsecurity fixes (without specific notification or detail) prior to\npublic disclosure, as detailed in the ",(0,a.kt)("inlineCode",{parentName:"p"},"Sylabs Security Policy\n<https://sylabs.io/security-policy>"),"__."),(0,a.kt)("h2",{id:"singularity-runtime--user-privilege"},"Singularity Runtime & User Privilege"),(0,a.kt)("p",null,"The Singularity Runtime enforces a unique security model that makes it\nappropriate for ",(0,a.kt)("em",{parentName:"p"},"untrusted users")," to run ",(0,a.kt)("em",{parentName:"p"},"untrusted containers")," safely\non multi-tenant resources. When you run a container, the processes in\nthe container will run as your user account. Singularity dynamically\nwrites UID and GID information to the appropriate files within the\ncontainer, and the user remains the same ",(0,a.kt)("em",{parentName:"p"},"inside")," and ",(0,a.kt)("em",{parentName:"p"},"outside"),"\nthe container, i.e., if you're an unprivileged user while entering the\ncontainer you'll remain an unprivileged user inside the container."),(0,a.kt)("p",null,"Additional blocks are in place to prevent users from escalating\nprivileges once they are inside of a container. The container file\nsystem is mounted using the ",(0,a.kt)("inlineCode",{parentName:"p"},"nosuid")," option, and processes are\nstarted with the ",(0,a.kt)("inlineCode",{parentName:"p"},"PR_NO_NEW_PRIVS")," flag set. This means that even if\nyou run ",(0,a.kt)("inlineCode",{parentName:"p"},"sudo")," inside your container, you won't be able to change to\nanother user, or gain root priveleges by other means. This approach\nprovides a secure way for users to run containers and greatly\nsimplifies things like reading and writing data to the host system\nwith appropriate ownership."),(0,a.kt)("p",null,"It is also important to note that the philosophy of Singularity is\n",(0,a.kt)("em",{parentName:"p"},"Integration")," over ",(0,a.kt)("em",{parentName:"p"},"Isolation"),". Most container run times strive to\nisolate your container from the host system and other containers as\nmuch as possible. Singularity, on the other hand, assumes that the\nuser\u2019s primary goals are portability, reproducibility, and ease of use\nand that isolation is often a tertiary concern. Therefore, Singularity\nonly isolates the mount namespace by default, and will bind mount\nseveral host directories such as ",(0,a.kt)("inlineCode",{parentName:"p"},"$HOME")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"/tmp")," into the\ncontainer at runtime. If needed, additional levels of isolation can be\nachieved by passing options causing Singularity to enter any or all of\nthe other kernel namespaces and to prevent automatic bind mounting.\nThese measures allow users to interact with the host system from\nwithin the container in sensible ways."),(0,a.kt)("h2",{id:"singularity-image-format-sif"},"Singularity Image Format (SIF)"),(0,a.kt)("p",null,"Ensuring container security as a continuous process. Singularity\nprovides ways to ensure integrity throughout the lifecyle of a\ncontainer, i.e. at rest, in transit and while running. The SIF\nSingularity Image Format has been designed to achieve these goals."),(0,a.kt)("p",null,"A SIF file is an immutable container image that packages the container\nenvironment into a single file. SIF supports security and integrity\nthrough the ability to cryptographically sign a container, creating a\nsignature block within the SIF file which can guarantee immutability\nand provide accountability as to who signed it. Singularity follows\nthe ",(0,a.kt)("inlineCode",{parentName:"p"},"OpenPGP <https://www.openpgp.org/>"),"_ standard to create and\nmanage these signatures, and the keys used to create them. After\nbuilding an image with Singularity, a user can ",(0,a.kt)("inlineCode",{parentName:"p"},"singularity sign"),"\nthe container and push it to the Library along with its public PGP key\n(stored in :ref:",(0,a.kt)("inlineCode",{parentName:"p"},"Keystore <keystore>"),"). The signature can be verified\n(",(0,a.kt)("inlineCode",{parentName:"p"},"singularity verify"),") while pulling or downloading the\nimage. :ref:",(0,a.kt)("inlineCode",{parentName:"p"},"This feature <signNverify>")," makes it easy to to establish\ntrust in collaborations within and between teams."),(0,a.kt)("p",null,"In Singularity 3.4 and above, the root file system of a container\n(stored in the squashFS partition of SIF) can be encrypted. As a\nresult, everything inside the container becomes inaccessible without\nthe correct key or passphrase. Other users on the system will be able\nto look inside your container files. The content of the container is\nprivate, even if the SIF file is shared in public."),(0,a.kt)("p",null,"Unlike other container platforms where execution requires a number of\nlayers to be extracted to a rootfs directory on the host, Singularity\nexecutes containers in a single step, directly from the immutable\n",(0,a.kt)("inlineCode",{parentName:"p"},".sif"),". This reduces the attack surface and allows the container to\nbe easily verified at runtime, to ensure it has not been tampered with."),(0,a.kt)("h2",{id:"admin-configurable-files"},"Admin Configurable Files"),(0,a.kt)("p",null,"System administrators who manage Singularity can use configuration\nfiles, to set security restrictions, grant or revoke a user\u2019s\ncapabilities, manage resources and authorize containers etc."),(0,a.kt)("p",null,"For example, the ",(0,a.kt)("inlineCode",{parentName:"p"},"ecl.toml\n<https://sylabs.io/guides/\\{adminversion\\}/admin-guide/configfiles.html#ecl-toml>"),"_\nfile allows blacklisting and whitelisting of containers."),(0,a.kt)("p",null,"Configuration files and their parameters are documented for administrators\ndocumented ",(0,a.kt)("inlineCode",{parentName:"p"},"here\n<https://sylabs.io/guides/\\{adminversion\\}/admin-guide/configfiles.html>"),"__."),(0,a.kt)("h3",{id:"cgroups-support"},"cgroups support"),(0,a.kt)("p",null,"Starting with v3.0, Singularity added native support for ",(0,a.kt)("inlineCode",{parentName:"p"},"cgroups"),",\nallowing users to limit the resources their containers consume without\nthe help of a separate program like a batch scheduling system. This\nfeature can help to prevent DoS attacks where one container seizes\ncontrol of all available system resources in order to stop other\ncontainers from operating properly.  To use this feature, a user first\ncreates a cgroups configuration file. An example configuration file is\ninstalled by default with Singularity as a guide. At runtime, the\n",(0,a.kt)("inlineCode",{parentName:"p"},"--apply-cgroups")," option is used to specify the location of the\nconfiguration file to apply to the container and cgroups are\nconfigured accordingly. More about cgroups support ",(0,a.kt)("inlineCode",{parentName:"p"},"here\n<https://sylabs.io/guides/\\{adminversion\\}/admin-guide/configfiles.html#cgroups-toml>"),"__."),(0,a.kt)("h3",{id:"--security-options"},(0,a.kt)("inlineCode",{parentName:"h3"},"--security")," options"),(0,a.kt)("p",null,"Singularity supports a number of methods for further modifying the\nsecurity scope and context when running Singularity containers.  Flags\ncan be passed to the action commands; ",(0,a.kt)("inlineCode",{parentName:"p"},"shell"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"exec"),", and ",(0,a.kt)("inlineCode",{parentName:"p"},"run"),"\nallowing fine grained control of security. Details about them are\ndocumented :ref:",(0,a.kt)("inlineCode",{parentName:"p"},"here <security-options>"),"."),(0,a.kt)("h2",{id:"security-in-the-sylabs-cloud"},"Security in the Sylabs Cloud"),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"Sylabs Cloud <https://cloud.sylabs.io/home>"),"_ consists of a Remote\nBuilder, a Container Library, and a Keystore. Together, theses\nservices provide an end-to-end solution for packaging and distributing\napplications in secure and trusted containers."),(0,a.kt)("h3",{id:"remote-builder"},"Remote Builder"),(0,a.kt)("p",null,"As mentioned earlier, the Singularity runtime prevents executing code\nwith root-level permissions on the host system. However, building a\ncontainer requires elevated privileges that most shared environments\ndo not grant their users. The ",(0,a.kt)("inlineCode",{parentName:"p"},"Build Service\n<https://cloud.sylabs.io/builder>"),"_ aims to address this by allowing\nunprivileged users to build containers remotely, with root level\npermissions inside the secured service. System administrators can use\nthe system to monitor which users are building containers, and the\ncontents of those containers. The Singularity CLI has native\nintegration with the Build Service from version 3.0 onwards. In\naddition, a browser interface to the Build Service also exists, which\nallows users to build containers using only a web browser."),(0,a.kt)("p",null,".. note::"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"Please also see the :ref:`Fakeroot feature <fakeroot>` which is a\nsecure option for admins in multi-tenant HPC environments and\nsimilar use cases where they might want to grant a user special\nprivileges inside a container.\n\nFakeroot has some limitations, and requires unpriveleged user\nnamespace support in the host kernel.\n")),(0,a.kt)("h3",{id:"container-library"},"Container Library"),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"Container Library <https://cloud.sylabs.io/library>"),"_ allows\nusers to store and share Singularity container images in the\nSingularity Image Format (SIF). A web front-end allows users to create\nnew projects within the Container Library, edit documentation\nassociated with container images, and discover container images\npublished by their peers."),(0,a.kt)("p",null,".. _keystore:"),(0,a.kt)("h3",{id:"key-store"},"Key Store"),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"Key Store <https://cloud.sylabs.io/keystore>"),(0,a.kt)("em",{parentName:"p"}," is a key\nmanagement system offered by Sylabs that uses an ",(0,a.kt)("inlineCode",{parentName:"em"},"OpenPGP\nimplementation <https://gnupg.org/>"))," to permit sharing and discovery\nof PGP public keys used to sign and verify Singularity container\nimages. This service is based on the OpenPGP HTTP Keyserver Protocol\n(HKP), with several enhancements:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"The Service requires connections to be secured with Transport Layer\nSecurity (TLS)."),(0,a.kt)("li",{parentName:"ul"},"The Service implements token-based authentication, allowing only\nauthenticated users to add or modify PGP keys."),(0,a.kt)("li",{parentName:"ul"},"A web front-end allows users to view and search for PGP keys using a\nweb browser.")),(0,a.kt)("h3",{id:"authentication-and-encryption"},"Authentication and encryption"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("p",{parentName:"li"},"Communication between users, the authentication service other\nservices is secured via TLS encryption.")),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("p",{parentName:"li"},"The services support authentication of users via signed and encrypted authentication\ntokens.")),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("p",{parentName:"li"},"There is no implicit trust relationship between each service. Each\nrequest between the services is authenticated using the\nauthentication token supplied by the user in the associated\nrequest."))))}c.isMDXComponent=!0}}]);