(self.webpackChunksingularity_web=self.webpackChunksingularity_web||[]).push([[579],{1007:function(e,n,t){"use strict";t.r(n),t.d(n,{frontMatter:function(){return r},metadata:function(){return s},toc:function(){return l},default:function(){return u}});var i=t(2122),a=t(9756),o=(t(7294),t(3905)),r={id:"introduction",title:"Introduction to Singularity",slug:"/"},s={unversionedId:"about/introduction",id:"about/introduction",isDocsHomePage:!1,title:"Introduction to Singularity",description:"Singularity is a container platform. It allows you to create and run",source:"@site/docs/about/introduction.md",sourceDirName:"about",slug:"/",permalink:"/docs/",editUrl:"https://github.com/hpcng/singularity-web/edit/main/docs/about/introduction.md",version:"current",frontMatter:{id:"introduction",title:"Introduction to Singularity",slug:"/"},sidebar:"someSidebar",next:{title:"Security in Singularity",permalink:"/docs/about/security"}},l=[{value:"Why use Singularity?",id:"why-use-singularity",children:[]},{value:"Why use containers?",id:"why-use-containers",children:[]},{value:"Use Cases",id:"use-cases",children:[{value:"BYOE: Bring Your Own Environment!",id:"byoe-bring-your-own-environment",children:[]},{value:"Reproducible science",id:"reproducible-science",children:[]},{value:"Commercially supported code requiring a particular environment",id:"commercially-supported-code-requiring-a-particular-environment",children:[]},{value:"Static environments (software appliances)",id:"static-environments-software-appliances",children:[]},{value:"Legacy code on old operating systems",id:"legacy-code-on-old-operating-systems",children:[]},{value:"Complicated software stacks that are very host specific",id:"complicated-software-stacks-that-are-very-host-specific",children:[]},{value:"Complicated work-flows that require custom installation and/or data",id:"complicated-work-flows-that-require-custom-installation-andor-data",children:[]}]}],c={toc:l};function u(e){var n=e.components,t=(0,a.Z)(e,["components"]);return(0,o.kt)("wrapper",(0,i.Z)({},c,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"Singularity is a ",(0,o.kt)("em",{parentName:"p"},"container")," platform. It allows you to create and run\ncontainers that package up pieces of software in a way that is\nportable and reproducible. You can build a container using Singularity\non your laptop, and then run it on many of the largest HPC clusters in\nthe world, local university or company clusters, a single server, in\nthe cloud, or on a workstation down the hall. Your container is a\nsingle file, and you don't have to worry about how to install all the\nsoftware you need on each different operating system."),(0,o.kt)("h2",{id:"why-use-singularity"},"Why use Singularity?"),(0,o.kt)("p",null,"Singularity was created to run complex applications on HPC clusters in\na simple, portable, and reproducible way. First developed at Lawrence\nBerkeley National Laboratory, it quickly became popular at other HPC\nsites, academic sites, and beyond. Singularity is an open-source\nproject, with a friendly community of developers and users. The user\nbase continues to expand, with Singularity now used across industry\nand academia in many areas of work."),(0,o.kt)("p",null,"Many container platforms are available, but Singularity is focused on:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Verifiable reproducibility and security, using cryptographic\nsignatures, an immutable container image format, and in-memory\ndecryption."),(0,o.kt)("li",{parentName:"ul"},"Integration over isolation by default. Easily make use of GPUs, high speed\nnetworks, parallel filesystems on a cluster or server by default."),(0,o.kt)("li",{parentName:"ul"},"Mobility of compute. The single file SIF container format is easy\nto transport and share."),(0,o.kt)("li",{parentName:"ul"},"A simple, effective security model. You are the same user inside a\ncontainer as outside, and cannot gain additional privilege on the\nhost system by default. Read more about :ref:",(0,o.kt)("inlineCode",{parentName:"li"},"security"),".")),(0,o.kt)("h2",{id:"why-use-containers"},"Why use containers?"),(0,o.kt)("p",null,"A Unix operating system is broken into two primary components, the\nkernel space, and the user space. The Kernel talks to the hardware,\nand provides core system features. The user space is the environment\nthat most people are most familiar with. It is where applications,\nlibraries and system services run."),(0,o.kt)("p",null,"Traditionally you use an operating system that has a fixed combination\nof kernel and user space. If you have access to a machine running\nCentOS then you cannot install software that was packaged for Ubuntu\non it, because the user space of these distributions is not\ncompatible. It can also be very difficult to install multiple versions\nof the same software, which might be needed to support reproducibility\nin different workflows over time."),(0,o.kt)("p",null,"Containers change the user space into a swappable component. This\nmeans that the entire user space portion of a Linux operating system,\nincluding programs, custom configurations, and environment can be\nindependent of whether your system is running CentOS, Fedora\netc., underneath. A Singularity container packages up whatever you need\ninto a single, verifiable file."),(0,o.kt)("p",null,"Software developers can now build their stack onto whatever operating\nsystem base fits their needs best, and create distributable runtime\nenvironments so that users never have to worry about dependencies and\nrequirements, that they might not be able to satisfy on their\nsystems."),(0,o.kt)("h2",{id:"use-cases"},"Use Cases"),(0,o.kt)("h3",{id:"byoe-bring-your-own-environment"},"BYOE: Bring Your Own Environment!"),(0,o.kt)("p",null,"Engineering work-flows for research computing can be a complicated and\niterative process, and even more so on a shared and somewhat\ninflexible production environment. Singularity solves this problem by\nmaking the environment flexible."),(0,o.kt)("p",null,"Additionally, it is common (especially in education) for schools to\nprovide a standardized pre-configured Linux distribution to the\nstudents which includes all of the necessary tools, programs, and\nconfigurations so they can immediately follow along."),(0,o.kt)("h3",{id:"reproducible-science"},"Reproducible science"),(0,o.kt)("p",null,"Singularity containers can be built to include all of the programs,\nlibraries, data and scripts such that an entire demonstration can be\ncontained and either archived or distributed for others to replicate\nno matter what version of Linux they are presently running."),(0,o.kt)("h3",{id:"commercially-supported-code-requiring-a-particular-environment"},"Commercially supported code requiring a particular environment"),(0,o.kt)("p",null,"Some commercial applications are only certified to run on particular\nversions of Linux. If that application was installed into a\nSingularity container running the version of Linux that it is\ncertified for, that container could run on any Linux host. The\napplication environment, libraries, and certified stack would all\ncontinue to run exactly as it is intended."),(0,o.kt)("p",null,"Additionally, Singularity blurs the line between container and host\nsuch that your home directory (and other directories) exist within the\ncontainer. Applications within the container have full and direct\naccess to all files you own thus you can easily incorporate the\ncontained commercial application into your work and process flow on\nthe host."),(0,o.kt)("h3",{id:"static-environments-software-appliances"},"Static environments (software appliances)"),(0,o.kt)("p",null,"Fund once, update never software development model. While this is not\nideal, it is a common scenario for research funding. A certain amount\nof money is granted for initial development, and once that has been\ndone the interns, grad students, post-docs, or developers are\nreassigned to other projects. This leaves the software stack\nun-maintained, and even rebuilds for updated compilers or Linux\ndistributions can not be done without unfunded effort."),(0,o.kt)("h3",{id:"legacy-code-on-old-operating-systems"},"Legacy code on old operating systems"),(0,o.kt)("p",null,"Similar to the above example, while this is less than ideal it is a\nfact of the research ecosystem. As an example, I know of one Linux\ndistribution which has been end of life for 15 years which is still in\nproduction due to the software stack which is custom built for this\nenvironment. Singularity has no problem running that operating system\nand application stack on a current operating system and hardware."),(0,o.kt)("h3",{id:"complicated-software-stacks-that-are-very-host-specific"},"Complicated software stacks that are very host specific"),(0,o.kt)("p",null,"There are various software packages which are so complicated that it\ntakes much effort in order to port, update and qualify to new\noperating systems or compilers. The atmospheric and weather\napplications are a good example of this. Porting them to a contained\noperating system will prolong the use-fullness of the development\neffort considerably."),(0,o.kt)("h3",{id:"complicated-work-flows-that-require-custom-installation-andor-data"},"Complicated work-flows that require custom installation and/or data"),(0,o.kt)("p",null,"Consolidating a work-flow into a Singularity container simplifies\ndistribution and replication of scientific results. Making containers\navailable along with published work enables other scientists to build\nupon (and verify) previous scientific work."))}u.isMDXComponent=!0}}]);