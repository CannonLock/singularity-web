(self.webpackChunksingularity_web=self.webpackChunksingularity_web||[]).push([[41],{7833:function(e,n,t){"use strict";t.r(n),t.d(n,{frontMatter:function(){return l},metadata:function(){return s},toc:function(){return r},default:function(){return u}});var i=t(2122),o=t(9756),a=(t(7294),t(3905)),l={id:"configfiles",title:"Configuration Files"},s={unversionedId:"configfiles",id:"configfiles",isDocsHomePage:!1,title:"Configuration Files",description:"As a Singularity Administrator, you will have access to various configuration",source:"@site/docs-admin/configfiles.md",sourceDirName:".",slug:"/configfiles",permalink:"/docs-admin/configfiles",editUrl:"https://github.com/hpcng/singularity-web/edit/main/docs-admin/configfiles.md",version:"current",frontMatter:{id:"configfiles",title:"Configuration Files"},sidebar:"someSidebar",previous:{title:"Installing Singularity",permalink:"/docs-admin/installation"},next:{title:"User Namespaces & Fakeroot",permalink:"/docs-admin/user_namespace"}},r=[{value:"singularity.conf",id:"singularityconf",children:[]},{value:"Example",id:"example",children:[]},{value:"cgroups.toml",id:"cgroupstoml",children:[]},{value:"ecl.toml",id:"ecltoml",children:[]},{value:"GPU Library Configuration",id:"gpu-library-configuration",children:[]},{value:"capability.json",id:"capabilityjson",children:[]},{value:"seccomp-profiles",id:"seccomp-profiles",children:[]},{value:"remote.yaml",id:"remoteyaml",children:[]}],p={toc:r};function u(e){var n=e.components,t=(0,o.Z)(e,["components"]);return(0,a.kt)("wrapper",(0,i.Z)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"As a Singularity Administrator, you will have access to various configuration\nfiles, that will let you manage container resources, set security restrictions\nand configure network options etc, when installing Singularity across the system.\nAll these files can be found in ",(0,a.kt)("inlineCode",{parentName:"p"},"/usr/local/etc/singularity")," by default (though\nits location will obviously differ based on options passed during the\ninstallation). This page will describe the following configuration files and\nthe various parameters contained by them. They are usually self documenting\nbut here are several things to pay special attention to:"),(0,a.kt)("hr",null),(0,a.kt)("h2",{id:"singularityconf"},"singularity.conf"),(0,a.kt)("p",null,"Most of the configuration options are set using the file ",(0,a.kt)("inlineCode",{parentName:"p"},"singularity.conf"),"\nthat defines the global configuration for Singularity across the entire system.\nUsing this file, system administrators can have direct say as to what functions\nthe users can utilize. As a security measure, for ",(0,a.kt)("inlineCode",{parentName:"p"},"setuid")," installations of\nSingularity it must be owned by root and must not be writable by users or\nSingularity will refuse to run. This is not the case for ",(0,a.kt)("inlineCode",{parentName:"p"},"non-setuid"),"\ninstallations that will only ever execute with user priviledge and thus do not\nrequire such limitations. The options for this configuration are listed below.\nOptions are grouped together based on relevance, the order of options within\n",(0,a.kt)("inlineCode",{parentName:"p"},"singularity.conf")," differs."),(0,a.kt)("h1",{id:"setuid-and-capabilities"},"Setuid and Capabilities"),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"ALLOW SETUID"),":\nTo use all features of Singularity containers, Singularity will need to have\naccess to some privileged system calls. One way singularity achieves this is by\nusing binaries with the ",(0,a.kt)("inlineCode",{parentName:"p"},"setuid"),' bit enabled. This variable lets you\nenable/disable users ability to utilize these binaries within Singularity. By\ndefault, it is set to "yes", but when disabled, various Singularity features\nwill not function. Please see\n:ref:',(0,a.kt)("inlineCode",{parentName:"p"},"Unprivileged Installations <userns-limitations>")," for more information\nabout running Singularity without ",(0,a.kt)("inlineCode",{parentName:"p"},"setuid")," enabled."),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"ROOT DEFAULT CAPABILITIES"),":\nSingularity allows the specification of capabilities kept by the root user\nwhen running a container by default. Options include:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"full: all capabilities are maintained, this gives the same behavior as the ",(0,a.kt)("inlineCode",{parentName:"li"},"--keep-privs")," option."),(0,a.kt)("li",{parentName:"ul"},"file: only capabilities granted in ",(0,a.kt)("inlineCode",{parentName:"li"},"/usr/local/etc/singularity/capabilities/user.root")," are maintained."),(0,a.kt)("li",{parentName:"ul"},"no: no capabilities are maintained, this gives the same behavior as the ",(0,a.kt)("inlineCode",{parentName:"li"},"--no-privs")," option.")),(0,a.kt)("p",null,".. note::"),(0,a.kt)("p",null,"  The root user can manage the capabilities granted to individual containers when they\nare launched through the ",(0,a.kt)("inlineCode",{parentName:"p"},"--add-caps")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"drop-caps")," flags.\nPlease see ",(0,a.kt)("inlineCode",{parentName:"p"},"Linux Capabilities <https://sylabs.io/guides/\\{userversion\\}/user-guide/security_options.html#linux-capabilities>"),"_\nin the user guide for more information."),(0,a.kt)("h1",{id:"loop-devices"},"Loop Devices"),(0,a.kt)("p",null,"Singularity uses loop devices to facilitate the mounting of container\nfilesystems from SIF images."),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"MAX LOOP DEVICES"),":\nThis option allows an admin to limit the total number of loop devices\nSingularity will consume at a given time."),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"SHARED LOOP DEVICES"),":\nThis allows containers running the same image to share a single loop device.\nThis minimizes loop device usage and helps optimize kernel cache usage.\nEnabling this feature can be particularly useful for MPI jobs."),(0,a.kt)("h1",{id:"namespace-options"},"Namespace Options"),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"ALLOW PID NS"),":\nThis option determines if users can leverage the PID namespace when running\ntheir containers through the ",(0,a.kt)("inlineCode",{parentName:"p"},"--pid")," flag."),(0,a.kt)("p",null,".. note::\nFor some HPC systems, using the PID namespace has the potential of confusing\nsome resource managers as well as some MPI implementations."),(0,a.kt)("h1",{id:"configuration-files"},"Configuration Files"),(0,a.kt)("p",null,"Singularity allows for the automatic configuration of several system\nconfiguration files within containers to ease usage across systems."),(0,a.kt)("p",null,".. note::"),(0,a.kt)("p",null,"  These options will do nothing unless the file or directory path exists within\nthe container or Singularity has either overlay or underlay support enabled."),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"CONFIG PASSWD"),":\nThis option determines if Singularity should automatically append an entry to\n",(0,a.kt)("inlineCode",{parentName:"p"},"/etc/passwd")," for the user running the container."),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"CONFIG GROUP"),":\nThis option determines if Singularity should automatically append the calling\nuser's group entries to the containers ",(0,a.kt)("inlineCode",{parentName:"p"},"/etc/group"),"."),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"CONFIG RESOLV_CONF"),":\nThis option determines if Singularity should automatically bind the host's\n",(0,a.kt)("inlineCode",{parentName:"p"},"/etc/resolv/conf")," within the container."),(0,a.kt)("h1",{id:"session-directory-and-system-mounts"},"Session Directory and System Mounts"),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"SESSIONDIR MAX SIZE"),":\nIn order for the Singularity runtime to create a container it needs to create a\n",(0,a.kt)("inlineCode",{parentName:"p"},"sessiondir")," to manage various components of the container, including\nmounting filesystems over the base image filesystem. This option\nspecifies how large the default ",(0,a.kt)("inlineCode",{parentName:"p"},"sessiondir")," should be (in MB) and will\nonly affect users who use the ",(0,a.kt)("inlineCode",{parentName:"p"},"--contain")," options without also specifying a\nlocation to perform default read/writes to via the ",(0,a.kt)("inlineCode",{parentName:"p"},"--workdir")," or ",(0,a.kt)("inlineCode",{parentName:"p"},"--home"),"\noptions."),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"MOUNT PROC"),":\nThis option determines if Singularity should automatically bind mount ",(0,a.kt)("inlineCode",{parentName:"p"},"/proc"),"\nwithin the container."),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"MOUNT SYS"),":\nThis option determines if Singularity should automatically bind mount ",(0,a.kt)("inlineCode",{parentName:"p"},"/sys"),"\nwithin the container."),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"MOUNT DEV"),':\nShould be set to "YES", if you want Singularity to automatically bind mount\n',(0,a.kt)("inlineCode",{parentName:"p"},"/dev")," within the container. If set to 'minimal', then only 'null', 'zero',\n'random', 'urandom', and 'shm' will be included."),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"MOUNT DEVPTS"),":\nThis option determines if Singularity will mount a new instance of ",(0,a.kt)("inlineCode",{parentName:"p"},"devpts"),"\nwhen there is a ",(0,a.kt)("inlineCode",{parentName:"p"},"minimal")," ",(0,a.kt)("inlineCode",{parentName:"p"},"/dev")," directory as explained above, or when the\n",(0,a.kt)("inlineCode",{parentName:"p"},"--contain")," option is passed."),(0,a.kt)("p",null,".. note::\nThis requires either a kernel configured with\n",(0,a.kt)("inlineCode",{parentName:"p"},"CONFIG_DEVPTS_MULTIPLE_INSTANCES=y"),", or a kernel version at or newer than\n",(0,a.kt)("inlineCode",{parentName:"p"},"4.7"),"."),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"MOUNT HOME"),":\nWhen this option is enabled, Singularity will automatically determine the\ncalling user's home directory and attempt to mount it into the container."),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"MOUNT TMP"),":\nWhen this option is enabled, Singularity will automatically bind mount\n",(0,a.kt)("inlineCode",{parentName:"p"},"/tmp")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"/var/tmp")," into the container from the host. If the\n",(0,a.kt)("inlineCode",{parentName:"p"},"--contain")," option is passed, Singularity will create both locations within\nthe ",(0,a.kt)("inlineCode",{parentName:"p"},"sessiondir")," or within the directory specified by the ",(0,a.kt)("inlineCode",{parentName:"p"},"--workdir"),"\noption if that is passed as well."),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"MOUNT HOSTFS"),":\nThis option will cause Singularity to probe the host for all mounted\nfilesystems and bind those into containers at runtime."),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"MOUNT SLAVE"),":\nSingularity automatically mounts a handful host system directories to the\ncontainer by default. This option determines if filesystem changes on the host\nshould automatically be propogated to those directories in the container."),(0,a.kt)("p",null,".. note::\nThis should be set to ",(0,a.kt)("inlineCode",{parentName:"p"},"yes")," when autofs mounts in the system should\nshow up in the container."),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"MEMORY FS TYPE"),":\nThis option allows admins to choose the temporary filesystem used by\nSingularity. Temporary filesystems are primarily used for system\ndirectories like ",(0,a.kt)("inlineCode",{parentName:"p"},"/dev")," when the host system directory is not mounted\nwithin the container."),(0,a.kt)("p",null,".. note::"),(0,a.kt)("p",null,"  For Cray CLE 5 and 6, up to CLE 6.0.UP05, there is an issue (kernel panic) when Singularity\nuses tmpfs, so on affected systems it's recommended to set this value to ramfs to avoid a\nkernel panic"),(0,a.kt)("h1",{id:"bind-mount-management"},"Bind Mount Management"),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"BIND PATH"),":\nThis option is used for defining a list of files or directories to\nautomatically be made available when Singularity runs a container.\nIn order to successfully mount listed paths the file or directory path must\nexist within the container, or Singularity has either overlay or underlay\nsupport enabled."),(0,a.kt)("p",null,".. note::\nThis option is ignored when containers are invoked with the ",(0,a.kt)("inlineCode",{parentName:"p"},"--contain")," option."),(0,a.kt)("p",null,"You can define the a bind point where the source and destination are identical:"),(0,a.kt)("p",null,".. code-block:: none"),(0,a.kt)("p",null,"  bind path = /etc/localtime"),(0,a.kt)("p",null,"Or you can specify different source and destination locations using:"),(0,a.kt)("p",null,".. code-block:: none"),(0,a.kt)("p",null,"  bind path = /etc/singularity/default-nsswitch.conf:/etc/nsswitch.conf"),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"USER BIND CONTROL"),":\nThis allows admins to decide if users can define bind points at runtime.\nBy Default, this option is set to ",(0,a.kt)("inlineCode",{parentName:"p"},"YES"),", which means users can specify bind\npoints, scratch and tmp locations."),(0,a.kt)("h1",{id:"limiting-container-execution"},"Limiting Container Execution"),(0,a.kt)("p",null,"There are several ways to limit container execution as an admin listed below.\nIf stricter controls are required, check out the\n:ref:",(0,a.kt)("inlineCode",{parentName:"p"},"Execution Control List <execution_control_list>"),"."),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"LIMIT CONTAINER OWNERS"),":\nThis restricts container execution to only allow conatiners that are owned by\nthe specified user."),(0,a.kt)("p",null,".. note::"),(0,a.kt)("p",null,"  This feature will only apply when Singularity is running in SUID mode and the\nuser is non-root. By default this is set to ",(0,a.kt)("inlineCode",{parentName:"p"},"NULL"),"."),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"LIMIT CONTAINER GROUPS"),":\nThis restricts container execution to only allow conatiners that are owned by\nthe specified group."),(0,a.kt)("p",null,".. note::"),(0,a.kt)("p",null,"  This feature will only apply when Singularity is running in SUID mode and the\nuser is non-root. By default this is set to ",(0,a.kt)("inlineCode",{parentName:"p"},"NULL"),"."),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"LIMIT CONTAINER PATHS"),":\nThis restricts container execution to only allow containers that are located\nwithin the specified path prefix."),(0,a.kt)("p",null,".. note::"),(0,a.kt)("p",null,"  This feature will only apply when Singularity is running in SUID mode and the\nuser is non-root. By default this is set to ",(0,a.kt)("inlineCode",{parentName:"p"},"NULL"),"."),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"ALLOW CONTAINER ${TYPE}"),":\nThis option allows admins to limit the types of image formats that can be\nleveraged by users with Singularity. Formats include ",(0,a.kt)("inlineCode",{parentName:"p"},"squashfs")," which is used\nby SIF and v2.x Singularity images, ",(0,a.kt)("inlineCode",{parentName:"p"},"extfs")," which is used for writable\noverlays and some legacy Singularity images, ",(0,a.kt)("inlineCode",{parentName:"p"},"dir")," which is used by sandbox\nimages and ",(0,a.kt)("inlineCode",{parentName:"p"},"encrypted")," which is only used by SIF images to encrypt filesystem\ncontents."),(0,a.kt)("p",null,".. note::\nThese limitations do not apply to the root user."),(0,a.kt)("h1",{id:"networking-options"},"Networking Options"),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"--network")," option can be used to specify a CNI networking\nconfiguration that will be used when running a container with ",(0,a.kt)("inlineCode",{parentName:"p"},"network\nvirtualization\n<https://sylabs.io/guides/\\{userversion\\}/user-guide/networking.html>"),"_. Unrestricted\nuse of CNI network configurations requires root privilege, as certain\nconfigurations may disrupt the host networking environment."),(0,a.kt)("p",null,"Singularity 3.8 allows specific users or groups to be granted the\nability to run containers with adminstrator specified CNI\nconfigurations."),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"ALLOW NET USERS"),":\nAllow specified root administered CNI network configurations to be used by the\nspecified list of users. By default only root may use CNI configuration,\nexcept in the case of a fakeroot execution where only 40_fakeroot.conflist\nis used. This feature only applies when Singularity is running in\nSUID mode and the user is non-root."),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"ALLOW NET GROUPS"),":\nAllow specified root administered CNI network configurations to be used by the\nspecified list of users. By default only root may use CNI configuration,\nexcept in the case of a fakeroot execution where only 40_fakeroot.conflist\nis used. This feature only applies when Singularity is running in\nSUID mode and the user is non-root."),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"ALLOW NET NETWORKS"),":\nSpecify the names of CNI network configurations that may be used by users and\ngroups listed in the allow net users / allow net groups directives. Thus feature\nonly applies when Singularity is running in SUID mode and the user is non-root."),(0,a.kt)("h1",{id:"gpu-options"},"GPU Options"),(0,a.kt)("p",null,"Singularity provides integration with GPUs in order to facilitate GPU based\nworkloads seamlessly. Both options listed below are particularly useful in\nGPU only environments. For more information on using GPUs with Singularity\ncheckout :ref:",(0,a.kt)("inlineCode",{parentName:"p"},"GPU Library Configuration <gpu_library_configuration>"),"."),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"ALWAYS USE NV ${TYPE}"),":\nEnabling this option will cause every action command\n(",(0,a.kt)("inlineCode",{parentName:"p"},"exec/shell/run/instance"),") to be executed with the ",(0,a.kt)("inlineCode",{parentName:"p"},"--nv")," option\nimplicitly added."),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"ALWAYS USE ROCM ${TYPE}"),":\nEnabling this option will cause every action command\n(",(0,a.kt)("inlineCode",{parentName:"p"},"exec/shell/run/instance"),") to be executed with the ",(0,a.kt)("inlineCode",{parentName:"p"},"--rocm")," option\nimplicitly added."),(0,a.kt)("h1",{id:"supplemental-filesystems"},"Supplemental Filesystems"),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"ENABLE FUSEMOUNT"),":\nThis will allow users to mount fuse filesystems inside containers using the\n",(0,a.kt)("inlineCode",{parentName:"p"},"--fusemount")," flag."),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"ENABLE OVERLAY"),":\nThis option will allow Singularity to create bind mounts at paths that do not\nexist within the container image. This option can be set to ",(0,a.kt)("inlineCode",{parentName:"p"},"try"),", which will\ntry to use an overlayfs. If it fails to create an overlayfs in this case the\nbind path will be silently ignored."),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"ENABLE UNDERLAY"),":\nThis option will allow Singularity to create bind mounts at paths that do not\nexist within the container image, just like ",(0,a.kt)("inlineCode",{parentName:"p"},"ENABLE OVERLAY"),", but instead\nusing an underlay. This is suitable for systems where overlay is not possible\nor not working. If the overlay option is available and working, it will be\nused instead."),(0,a.kt)("h1",{id:"external-tooling-paths"},"External Tooling Paths"),(0,a.kt)("p",null,"Internally, Singularity leverages several pieces of tooling in order to provide\na wide breadth of features for users. Locations for these tools can be\ncustomized by system admins and referenced with the options below:"),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"CNI CONFIGURATION PATH"),":\nThis option allows admins to specify a custom path for the CNI configuration\nthat Singularity will use for ",(0,a.kt)("inlineCode",{parentName:"p"},"Network Virtualization <https://sylabs.io/guides/\\{userversion\\}/user-guide/networking.html>"),"_."),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"CNI PLUGIN PATH"),":\nThis option allows admins to specify a custom path for Singularity to access\nCNI plugin executables. Check out the ",(0,a.kt)("inlineCode",{parentName:"p"},"Network Virtualization <https://sylabs.io/guides/\\{userversion\\}/user-guide/networking.html>"),"_\nsection of the user guide for more information."),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"MKSQUASHFS PATH"),":\nThis allows an admin to specify the location of ",(0,a.kt)("inlineCode",{parentName:"p"},"mksquashfs")," if it is not\ninstalled in a standard location. If set, ",(0,a.kt)("inlineCode",{parentName:"p"},"mksquashfs")," at this path will be\nused instead of a ",(0,a.kt)("inlineCode",{parentName:"p"},"mksquashfs")," found in ",(0,a.kt)("inlineCode",{parentName:"p"},"PATH"),"."),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"CRYPTSETUP PATH"),":\nThe location for ",(0,a.kt)("inlineCode",{parentName:"p"},"cryptsetup")," is recorded by Singularity at build time and\nwill use that value if this is undefined. This option allows an admin to set\nthe path of ",(0,a.kt)("inlineCode",{parentName:"p"},"cryptsetup")," if it is located in a custom location and will\noverride the value recorded at build time."),(0,a.kt)("h1",{id:"updating-configuration-options"},"Updating Configuration Options"),(0,a.kt)("p",null,"In order to manage this configuration file, Singularity has a ",(0,a.kt)("inlineCode",{parentName:"p"},"config global"),"\ncommand group that allows you to get, set, reset, and unset values through the\nCLI. It's important to note that these commands must be run with elevated\npriveledges because the ",(0,a.kt)("inlineCode",{parentName:"p"},"singularity.conf")," can only be modified by an\nadministrator."),(0,a.kt)("h2",{id:"example"},"Example"),(0,a.kt)("p",null,"In this example we will changing the ",(0,a.kt)("inlineCode",{parentName:"p"},"BIND PATH")," option described above.\nFirst we can see the current list of bind paths set within our system\nconfiguration:"),(0,a.kt)("p",null,".. code-block:: none"),(0,a.kt)("p",null,'  $ sudo singularity config global --get "bind path"\n/etc/localtime,/etc/hosts'),(0,a.kt)("p",null,"Now we can add a new path and verify it was successfully added:"),(0,a.kt)("p",null,".. code-block:: none"),(0,a.kt)("p",null,'  $ sudo singularity config global --set "bind path" /etc/resolv.conf\n$ sudo singularity config global --get "bind path"\n/etc/resolv.conf,/etc/localtime,/etc/hosts'),(0,a.kt)("p",null,"From here we can remove a path with:"),(0,a.kt)("p",null,".. code-block:: none"),(0,a.kt)("p",null,'  $ sudo singularity config global --unset "bind path" /etc/localtime\n$ sudo singularity config global --get "bind path"\n/etc/resolv.conf,/etc/hosts'),(0,a.kt)("p",null,"If we want to reset the option to the default at installation, then we can\nreset it with:"),(0,a.kt)("p",null,".. code-block:: none"),(0,a.kt)("p",null,'  $ sudo singularity config global --reset "bind path"\n$ sudo singularity config global --get "bind path"\n/etc/localtime,/etc/hosts'),(0,a.kt)("p",null,"And now we are back to our original option settings. You can also test what a\nchange would look like by using the ",(0,a.kt)("inlineCode",{parentName:"p"},"--dry-run")," option in conjunction with\nthe above commands. Instead of writing to the configuration file, it will\noutput what would have been written to the configuration file if the command\nhad been run without the ",(0,a.kt)("inlineCode",{parentName:"p"},"--dry-run")," option:"),(0,a.kt)("p",null,".. code-block:: none"),(0,a.kt)("p",null,'  $ sudo singularity config global --dry-run --set "bind path" /etc/resolv.conf'),(0,a.kt)("h1",{id:"singularityconf-1"},"SINGULARITY.CONF"),(0,a.kt)("h1",{id:"this-is-the-global-configuration-file-for-singularity-this-file-controls"},"This is the global configuration file for Singularity. This file controls"),(0,a.kt)("p",null,"  ","[...]"),(0,a.kt)("h1",{id:"bind-path-string"},"BIND PATH: ","[STRING]"),(0,a.kt)("h1",{id:"default-undefined"},"DEFAULT: Undefined"),(0,a.kt)("h1",{id:"define-a-list-of-filesdirectories-that-should-be-made-available-from-within"},"Define a list of files/directories that should be made available from within"),(0,a.kt)("h1",{id:"the-container-the-file-or-directory-must-exist-within-the-container-on"},"the container. The file or directory must exist within the container on"),(0,a.kt)("h1",{id:"which-to-attach-to-you-can-specify-a-different-source-and-destination"},"which to attach to. you can specify a different source and destination"),(0,a.kt)("h1",{id:"path-respectively-with-a-colon-otherwise-source-and-dest-are-the-same"},"path (respectively) with a colon; otherwise source and dest are the same."),(0,a.kt)("h1",{id:"note-these-are-ignored-if-singularity-is-invoked-with---contain"},"NOTE: these are ignored if singularity is invoked with --contain."),(0,a.kt)("p",null,"  bind path = /etc/resolv.conf\nbind path = /etc/localtime\nbind path = /etc/hosts\n","[...]",'\n$ sudo singularity config global --get "bind path"\n/etc/localtime,/etc/hosts'),(0,a.kt)("p",null,"Above we can see that ",(0,a.kt)("inlineCode",{parentName:"p"},"/etc/resolv.conf")," is listed as a bind path in the\noutput of the ",(0,a.kt)("inlineCode",{parentName:"p"},"--dry-run")," command, but did not affect the actual bind paths\nof the system."),(0,a.kt)("hr",null),(0,a.kt)("h2",{id:"cgroupstoml"},"cgroups.toml"),(0,a.kt)("p",null,"Cgroups or Control groups let you implement metering and limiting on the\nresources used by processes. You can limit memory, CPU. You can block IO,\nnetwork IO, set SEL permissions for device nodes etc."),(0,a.kt)("p",null,".. note::"),(0,a.kt)("p",null,"  The ",(0,a.kt)("inlineCode",{parentName:"p"},"--apply-cgroups")," option can only be used with root privileges."),(0,a.kt)("h1",{id:"examples"},"Examples"),(0,a.kt)("p",null,"When you are limiting resources, apply the settings in the TOML file by using\nthe path as an argument to the ",(0,a.kt)("inlineCode",{parentName:"p"},"--apply-cgroups")," option like so:"),(0,a.kt)("p",null,".. code-block:: none"),(0,a.kt)("p",null,"  $ sudo singularity shell --apply-cgroups /path/to/cgroups.toml my_container.sif"),(0,a.kt)("h1",{id:"limiting-memory"},"Limiting memory"),(0,a.kt)("p",null,"To limit the amount of memory that your container uses to 500MB (524288000 bytes):"),(0,a.kt)("p",null,".. code-block:: none"),(0,a.kt)("p",null,"  ","[memory]","\nlimit = 524288000"),(0,a.kt)("p",null,"Start your container like so:"),(0,a.kt)("p",null,".. code-block:: none"),(0,a.kt)("p",null,"  $ sudo singularity instance start --apply-cgroups path/to/cgroups.toml my_container.sif instance1"),(0,a.kt)("p",null,"After that, you can verify that the container is only using 500MB of memory.\n(This example assumes that ",(0,a.kt)("inlineCode",{parentName:"p"},"instance1")," is the only running instance.)"),(0,a.kt)("p",null,".. code-block:: none"),(0,a.kt)("p",null,"  $ cat /sys/fs/cgroup/memory/singularity/*/memory.limit_in_bytes\n524288000"),(0,a.kt)("p",null,"Do not forget to stop your instances after configuring the options."),(0,a.kt)("p",null,"Similarly, the remaining examples can be tested by starting instances and\nexamining the contents of the appropriate subdirectories of ",(0,a.kt)("inlineCode",{parentName:"p"},"/sys/fs/cgroup/"),"."),(0,a.kt)("h1",{id:"limiting-cpu"},"Limiting CPU"),(0,a.kt)("p",null,"Limit CPU resources using one of the following strategies. The ",(0,a.kt)("inlineCode",{parentName:"p"},"cpu")," section\nof the configuration file can limit memory with the following:"),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"shares")),(0,a.kt)("p",null,"This corresponds to a ratio versus other cgroups with cpu shares. Usually the\ndefault value is ",(0,a.kt)("inlineCode",{parentName:"p"},"1024"),". That means if you want to allow to use 50% of a\nsingle CPU, you will set ",(0,a.kt)("inlineCode",{parentName:"p"},"512")," as value."),(0,a.kt)("p",null,".. code-block:: none"),(0,a.kt)("p",null,"  ","[cpu]","\nshares = 512"),(0,a.kt)("p",null,"A cgroup can get more than its share of CPU if there are enough idle CPU cycles\navailable in the system, due to the work conserving nature of the scheduler, so\na contained process can consume all CPU cycles even with a ratio of 50%. The\nratio is only applied when two or more processes conflicts with their needs of\nCPU cycles."),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"quota/period")),(0,a.kt)("p",null,"You can enforce hard limits on the CPU cycles a cgroup can consume, so\ncontained processes can't use more than the amount of CPU time set for the\ncgroup. ",(0,a.kt)("inlineCode",{parentName:"p"},"quota")," allows you to configure the amount of CPU time that a cgroup\ncan use per period. The default is 100ms (100000us). So if you want to limit\namount of CPU time to 20ms during period of 100ms:"),(0,a.kt)("p",null,".. code-block:: none"),(0,a.kt)("p",null,"  ","[cpu]","\nperiod = 100000\nquota = 20000"),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"cpus/mems")),(0,a.kt)("p",null,"You can also restrict access to specific CPUs and associated memory nodes by\nusing ",(0,a.kt)("inlineCode",{parentName:"p"},"cpus/mems")," fields:"),(0,a.kt)("p",null,".. code-block:: none"),(0,a.kt)("p",null,"  ","[cpu]",'\ncpus = "0-1"\nmems = "0-1"'),(0,a.kt)("p",null,"Where container has limited access to CPU 0 and CPU 1."),(0,a.kt)("p",null,".. note::"),(0,a.kt)("p",null,"  It's important to set identical values for both ",(0,a.kt)("inlineCode",{parentName:"p"},"cpus")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"mems"),"."),(0,a.kt)("h1",{id:"limiting-io"},"Limiting IO"),(0,a.kt)("p",null,"You can limit and monitor access to I/O for block devices.  Use the\n",(0,a.kt)("inlineCode",{parentName:"p"},"[blockIO]")," section of the configuration file to do this like so:"),(0,a.kt)("p",null,".. code-block:: none"),(0,a.kt)("p",null,"  ","[blockIO]","\nweight = 1000\nleafWeight = 1000"),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"weight")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"leafWeight")," accept values between ",(0,a.kt)("inlineCode",{parentName:"p"},"10")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"1000"),"."),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"weight")," is the default weight of the group on all the devices until and\nunless overridden by a per device rule."),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"leafWeight")," relates to weight for the purpose of deciding how heavily to\nweigh tasks in the given cgroup while competing with the cgroup's child\ncgroups."),(0,a.kt)("p",null,"To override ",(0,a.kt)("inlineCode",{parentName:"p"},"weight/leafWeight")," for ",(0,a.kt)("inlineCode",{parentName:"p"},"/dev/loop0")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"/dev/loop1")," block\ndevices you would do something like this:"),(0,a.kt)("p",null,".. code-block:: none"),(0,a.kt)("p",null,"  ","[blockIO]","[blockIO.weightDevice]","]\nmajor = 7\nminor = 0\nweight = 100\nleafWeight = 50\n[","[blockIO.weightDevice]","]\nmajor = 7\nminor = 1\nweight = 100\nleafWeight = 50"),(0,a.kt)("p",null,"You could limit the IO read/write rate to 16MB per second for the ",(0,a.kt)("inlineCode",{parentName:"p"},"/dev/loop0"),"\nblock device with the following configuration.  The rate is specified in bytes\nper second."),(0,a.kt)("p",null,".. code-block:: none"),(0,a.kt)("p",null,"  ","[blockIO]","[blockIO.throttleReadBpsDevice]","]\nmajor = 7\nminor = 0\nrate = 16777216\n[","[blockIO.throttleWriteBpsDevice]","]\nmajor = 7\nminor = 0\nrate = 16777216"),(0,a.kt)("p",null,".. _execution_control_list:"),(0,a.kt)("hr",null),(0,a.kt)("h2",{id:"ecltoml"},"ecl.toml"),(0,a.kt)("p",null,"The execution control list is defined here. You can authorize the containers by\nvalidating both the location of the SIF file in the filesystem and by\nchecking against a list of signing entities."),(0,a.kt)("p",null,".. code-block:: none"),(0,a.kt)("p",null,"  [","[execgroup]",']\ntagname = "group2"\nmode = "whitelist"\ndirpath = "/tmp/containers"\nkeyfp = ','["7064B1D6EFF01B1262FED3F03581D99FE87EAFD1"]'),(0,a.kt)("p",null,"Only the containers running from and signed with above-mentioned path and keys\nwill be authorized to run."),(0,a.kt)("p",null,"Three possible list modes you can choose from:"),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Whitestrict"),": The SIF must be signed by ",(0,a.kt)("em",{parentName:"p"},"ALL")," of the keys mentioned."),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Whitelist"),": As long as the SIF is signed by one or more of the keys, the\ncontainer is allowed to run."),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Blacklist"),": Only the containers whose keys are not mentioned in the group\nare allowed to run."),(0,a.kt)("p",null,".. note::"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"The ECL checks will use the new signature format introduced in\nSingularity 3.6.0. Containers signed with older versions of Singularity\nSingularity will not pass ECL checks.\n\nTo temporarily permit the use of legacy insecure signatures, set\n``legacyinsecure = true`` in ``ecl.toml``.\n")),(0,a.kt)("h1",{id:"managing-ecl-public-keys"},"Managing ECL public keys"),(0,a.kt)("p",null,"In Singularity 3.6, public keys associated with fingerprints specified in ECL rules\nwere required to be present in user's local keyring which is not very\nconvenient. Singularity 3.7.0 provides a mechanism to administrators for managing\na global keyring that ECL uses during signature verification, for that purpose a\n",(0,a.kt)("inlineCode",{parentName:"p"},"--global")," option was added for:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"singularity key import")," (root user only)"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"singularity key pull")," (root user only)"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"singularity key remove")," (root user only)"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"singularity key export")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"singularity key list"))),(0,a.kt)("p",null,".. note::\nFor security reasons, it is not possible to import private keys\ninto this global keyring because it must be accessible by users\nand is stored in the file ",(0,a.kt)("inlineCode",{parentName:"p"},"SYSCONFDIR/singularity/global-pgp-public"),"."),(0,a.kt)("p",null,".. _gpu_library_configuration:"),(0,a.kt)("hr",null),(0,a.kt)("h2",{id:"gpu-library-configuration"},"GPU Library Configuration"),(0,a.kt)("p",null,"When a container includes a GPU enabled application, Singularity (with\nthe ",(0,a.kt)("inlineCode",{parentName:"p"},"--nv")," or ",(0,a.kt)("inlineCode",{parentName:"p"},"--rocm")," options) can properly inject the required\nNvidia or AMD GPU driver libraries into the container, to match the\nhost's kernel. The GPU ",(0,a.kt)("inlineCode",{parentName:"p"},"/dev")," entries are provided in containers run\nwith ",(0,a.kt)("inlineCode",{parentName:"p"},"--nv")," or ",(0,a.kt)("inlineCode",{parentName:"p"},"--rocm")," even if the ",(0,a.kt)("inlineCode",{parentName:"p"},"--contain")," option is used\nto restrict the in-container device tree."),(0,a.kt)("p",null,"Compatibility between containerized CUDA/ROCm/OpenCL applications and\nhost drivers/libraries is dependent on the versions of the GPU compute\nframeworks that were used to build the applications. Compatibility and\nusage information is discussed in the ",(0,a.kt)("inlineCode",{parentName:"p"},"GPU Support")," section of the\n",(0,a.kt)("inlineCode",{parentName:"p"},"user guide\n<https://www.sylabs.io/guides/\\{userversion\\}/user-guide/>"),"__"),(0,a.kt)("h1",{id:"nvidia-gpus--cuda"},"NVIDIA GPUs / CUDA"),(0,a.kt)("p",null,"If the ",(0,a.kt)("inlineCode",{parentName:"p"},"nvidia-container-cli\n<https://github.com/NVIDIA/libnvidia-container>"),"_ tool is installed on\nthe host system, it will be used to locate any Nvidia libraries and\nbinaries on the host system."),(0,a.kt)("p",null,"If ",(0,a.kt)("inlineCode",{parentName:"p"},"nvidia-container-cli")," is not present, the ",(0,a.kt)("inlineCode",{parentName:"p"},"nvliblist.conf"),"\nfile is used to specify libraries and executables that need to be\ninjected into the container when running Singularity with the ",(0,a.kt)("inlineCode",{parentName:"p"},"--nv"),"\nNvidia GPU support option. The default ",(0,a.kt)("inlineCode",{parentName:"p"},"nvliblist.conf")," is suitable\nfor CUDA 10.1, but may need to be modified if you need to include\nadditional libraries, or further libraries are added to newer versions\nof the Nvidia driver/CUDA distribution."),(0,a.kt)("h1",{id:"amd-radeon-gpus--rocm"},"AMD Radeon GPUs / ROCm"),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"rocmliblist.conf")," file is used to specify libraries and\nexecutables that need to be injected into the container when running\nSingularity with the ",(0,a.kt)("inlineCode",{parentName:"p"},"--rocm")," Radeon GPU support option. The default\n",(0,a.kt)("inlineCode",{parentName:"p"},"rocmliblist.conf")," is suitable for ROCm 2.10, but may need to modified\nif you need to include additional libraries, or further libraries are\nadded to newer versions of the ROCm distribution."),(0,a.kt)("h1",{id:"gpu-liblist-format"},"GPU liblist format"),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"nvliblist.conf")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"rocmliblist")," files list the basename of\nexecutables and libraries to be bound into the container, without path\ninformation."),(0,a.kt)("p",null,"Binaries are found by searching ",(0,a.kt)("inlineCode",{parentName:"p"},"$PATH"),":"),(0,a.kt)("p",null,".. code-block:: none"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"# put binaries here\n# In shared environments you should ensure that permissions on these files\n# exclude writing by non-privileged users.\nrocm-smi\nrocminfo\n")),(0,a.kt)("p",null,"Libraries should be specified without version information,\ni.e. ",(0,a.kt)("inlineCode",{parentName:"p"},"libname.so"),", and are resolved using ",(0,a.kt)("inlineCode",{parentName:"p"},"ldconfig"),"."),(0,a.kt)("p",null,".. code-block:: none"),(0,a.kt)("h1",{id:"put-libs-here-must-end-in-so"},"put libs here (must end in .so)"),(0,a.kt)("p",null,"   libamd_comgr.so\nlibcomgr.so\nlibCXLActivityLogger.so"),(0,a.kt)("p",null,"If you receive warnings that binaries or libraries are not found,\nensure that they are in a system path (binaries), or available in paths\nconfigured in ",(0,a.kt)("inlineCode",{parentName:"p"},"/etc/ld.so.conf")," (libraries)."),(0,a.kt)("hr",null),(0,a.kt)("h2",{id:"capabilityjson"},"capability.json"),(0,a.kt)("p",null,".. note::\nIt is extremely important to recognize that ",(0,a.kt)("strong",{parentName:"p"},"granting users Linux\ncapabilities with the")," ",(0,a.kt)("inlineCode",{parentName:"p"},"capability")," ",(0,a.kt)("strong",{parentName:"p"},"command group is usually identical\nto granting those users root level access on the host system"),'. Most if not\nall capabilities will allow users to "break out" of the container and\nbecome root on the host. This feature is targeted toward special use cases\n(like cloud-native architectures) where an admin/developer might want to\nlimit the attack surface within a container that normally runs as root.\nThis is not a good option in multi-tenant HPC environments where an admin\nwants to grant a user special privileges within a container. For that and\nsimilar use cases, the :ref:',(0,a.kt)("inlineCode",{parentName:"p"},"fakeroot feature <fakeroot>")," is a better\noption."),(0,a.kt)("p",null,"Singularity provides full support for admins to grant and revoke Linux\ncapabilities on a user or group basis. The ",(0,a.kt)("inlineCode",{parentName:"p"},"capability.json")," file is\nmaintained by Singularity in order to manage these capabilities. The\n",(0,a.kt)("inlineCode",{parentName:"p"},"capability")," command group allows you to ",(0,a.kt)("inlineCode",{parentName:"p"},"add"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"drop"),", and ",(0,a.kt)("inlineCode",{parentName:"p"},"list"),"\ncapabilities for users and groups."),(0,a.kt)("p",null,"For example, let us suppose that we have decided to grant a user (named\n",(0,a.kt)("inlineCode",{parentName:"p"},"pinger"),") capabilities to open raw sockets so that they can use ",(0,a.kt)("inlineCode",{parentName:"p"},"ping")," in\na container where the binary is controlled via capabilities."),(0,a.kt)("p",null,"To do so, we would issue a command such as this:"),(0,a.kt)("p",null,".. code-block:: none"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"$ sudo singularity capability add --user pinger CAP_NET_RAW\n")),(0,a.kt)("p",null,"This means the user ",(0,a.kt)("inlineCode",{parentName:"p"},"pinger")," has just been granted permissions (through Linux\ncapabilities) to open raw sockets within Singularity containers."),(0,a.kt)("p",null,"We can check that this change is in effect with the ",(0,a.kt)("inlineCode",{parentName:"p"},"capability list"),"\ncommand."),(0,a.kt)("p",null,".. code-block:: none"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"$ sudo singularity capability list --user pinger\nCAP_NET_RAW\n")),(0,a.kt)("p",null,"To take advantage of this new capability, the user ",(0,a.kt)("inlineCode",{parentName:"p"},"pinger")," must also request\nthe capability when executing a container with the ",(0,a.kt)("inlineCode",{parentName:"p"},"--add-caps")," flag.\n",(0,a.kt)("inlineCode",{parentName:"p"},"pinger")," would need to run a command like this:"),(0,a.kt)("p",null,".. code-block:: none"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"$ singularity exec --add-caps CAP_NET_RAW library://sylabs/tests/ubuntu_ping:v1.0 ping -c 1 8.8.8.8\nPING 8.8.8.8 (8.8.8.8) 56(84) bytes of data.\n64 bytes from 8.8.8.8: icmp_seq=1 ttl=52 time=73.1 ms\n\n--- 8.8.8.8 ping statistics ---\n1 packets transmitted, 1 received, 0% packet loss, time 0ms\nrtt min/avg/max/mdev = 73.178/73.178/73.178/0.000 ms\n")),(0,a.kt)("p",null,"If we decide that it is no longer necessary to allow the user ",(0,a.kt)("inlineCode",{parentName:"p"},"pinger"),"\nto open raw sockets within Singularity containers, we can revoke the\nappropriate Linux capability like so:"),(0,a.kt)("p",null,".. code-block:: none"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"$ sudo singularity capability drop --user pinger CAP_NET_RAW\n")),(0,a.kt)("p",null,"Now if ",(0,a.kt)("inlineCode",{parentName:"p"},"pinger")," tries to use ",(0,a.kt)("inlineCode",{parentName:"p"},"CAP_NET_RAW"),", Singularity will not give the\ncapability to the container and ",(0,a.kt)("inlineCode",{parentName:"p"},"ping")," will fail to create a socket:"),(0,a.kt)("p",null,".. code-block:: none"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"$ singularity exec --add-caps CAP_NET_RAW library://sylabs/tests/ubuntu_ping:v1.0 ping -c 1 8.8.8.8\nWARNING: not authorized to add capability: CAP_NET_RAW\nping: socket: Operation not permitted\n")),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"capability add")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"drop")," subcommands will also accept the case\ninsensitive keyword ",(0,a.kt)("inlineCode",{parentName:"p"},"all")," to grant or revoke all Linux capabilities to a user\nor group."),(0,a.kt)("p",null,"For more information about individual Linux capabilities check out the\n",(0,a.kt)("inlineCode",{parentName:"p"},"man pages <http://man7.org/linux/man-pages/man7/capabilities.7.html>"),"_ or\nuse the ",(0,a.kt)("inlineCode",{parentName:"p"},"capability avail")," command to output available capabilities with a\ndescription of their behaviors."),(0,a.kt)("hr",null),(0,a.kt)("h2",{id:"seccomp-profiles"},"seccomp-profiles"),(0,a.kt)("p",null,"Secure Computing (seccomp) Mode is a feature of the Linux kernel that allows an\nadministrator to filter system calls being made from a container. Profiles made\nup of allowed and restricted calls can be passed to different containers.\n",(0,a.kt)("em",{parentName:"p"},"Seccomp")," provides more control than ",(0,a.kt)("em",{parentName:"p"},"capabilities")," alone, giving a smaller\nattack surface for an attacker to work from within a container."),(0,a.kt)("p",null,"You can set the default action with ",(0,a.kt)("inlineCode",{parentName:"p"},"defaultAction")," for a non-listed system\ncall. Example: ",(0,a.kt)("inlineCode",{parentName:"p"},"SCMP_ACT_ALLOW")," filter will allow all the system calls if it\nmatches the filter rule and you can set it to ",(0,a.kt)("inlineCode",{parentName:"p"},"SCMP_ACT_ERRNO")," which will have\nthe thread receive a return value of ",(0,a.kt)("em",{parentName:"p"},"errno")," if it calls a system call that matches\nthe filter rule.\nThe file is formatted in a way that it can take a list of additional system calls\nfor different architecture and Singularity will automatically take syscalls\nrelated to the current architecture where it's been executed.\nThe ",(0,a.kt)("inlineCode",{parentName:"p"},"include"),"/",(0,a.kt)("inlineCode",{parentName:"p"},"exclude"),"-> ",(0,a.kt)("inlineCode",{parentName:"p"},"caps")," section will include/exclude the listed\nsystem calls if the user has the associated capability."),(0,a.kt)("p",null,"Use the ",(0,a.kt)("inlineCode",{parentName:"p"},"--security")," option to invoke the container like:"),(0,a.kt)("p",null,".. code-block:: none"),(0,a.kt)("p",null,"  $ sudo singularity shell --security seccomp:/home/david/my.json my_container.sif"),(0,a.kt)("p",null,"For more insight into security options, network options, cgroups, capabilities,\netc, please check the ",(0,a.kt)("inlineCode",{parentName:"p"},"Userdocs <https://www.sylabs.io/guides/\\{userversion\\}/user-guide/>"),(0,a.kt)("em",{parentName:"p"},"\nand it's ",(0,a.kt)("inlineCode",{parentName:"em"},"Appendix <https://www.sylabs.io/guides/\\{userversion\\}/user-guide/appendix.html>")),"."),(0,a.kt)("hr",null),(0,a.kt)("h2",{id:"remoteyaml"},"remote.yaml"),(0,a.kt)("p",null,"System-wide remote endpoints are defined in a configuration file typically\nlocated at ",(0,a.kt)("inlineCode",{parentName:"p"},"/usr/local/etc/singularity/remote.yaml")," (this location may\nvary depending on installation parameters) and can be managed by\nadministrators with the ",(0,a.kt)("inlineCode",{parentName:"p"},"remote")," command group."),(0,a.kt)("h1",{id:"remote-endpoints"},"Remote Endpoints"),(0,a.kt)("p",null,"Sylabs introduced the online ",(0,a.kt)("inlineCode",{parentName:"p"},"Sylabs Cloud\n<https://cloud.sylabs.io/home>"),(0,a.kt)("em",{parentName:"p"}," to enable users to ",(0,a.kt)("inlineCode",{parentName:"em"},"Create\n<https://cloud.sylabs.io/builder>")),", ",(0,a.kt)("inlineCode",{parentName:"p"},"Secure\n<https://cloud.sylabs.io/keystore?sign=true>"),(0,a.kt)("em",{parentName:"p"},", and ",(0,a.kt)("inlineCode",{parentName:"em"},"Share\n<https://cloud.sylabs.io/library/guide#create>"))," their container\nimages with others."),(0,a.kt)("p",null,"Singularity allows users to login to an account on the Sylabs Cloud, or\nconfigure Singularity to use an API compatable container service such as\na local installation of Singularity Enterprise, which provides an on-premise\nprivate Container Library, Remote Builder and Key Store."),(0,a.kt)("p",null,".. note::"),(0,a.kt)("p",null,"   A fresh installation of Singularity is automatically configured\nto connect to the public ",(0,a.kt)("inlineCode",{parentName:"p"},"Sylabs Cloud <https://cloud.sylabs.io>"),"__\nservices."),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Examples")),(0,a.kt)("p",null,"Use the ",(0,a.kt)("inlineCode",{parentName:"p"},"remote")," command group with the ",(0,a.kt)("inlineCode",{parentName:"p"},"--global")," flag to create a\nsystem-wide remote endpoint:"),(0,a.kt)("p",null,".. code-block:: none"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'$ sudo singularity remote add --global company-remote https://enterprise.example.com\n[sudo] password for dave:\nINFO:    Remote "company-remote" added.\nINFO:    Global option detected. Will not automatically log into remote.\n')),(0,a.kt)("p",null,"Conversely, to remove a system-wide endpoint:"),(0,a.kt)("p",null,".. code-block:: none"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'$ sudo singularity remote remove --global company-remote\n[sudo] password for dave:\nINFO:    Remote "company-remote" removed.\n')),(0,a.kt)("p",null,"Singularity 3.7 introduces the ability for an administrator to make a remote\nthe only usable remote for the system by using the ",(0,a.kt)("inlineCode",{parentName:"p"},"--exclusive")," flag:"),(0,a.kt)("p",null,".. code-block:: none"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'$ sudo singularity remote use --exclusive company-remote\n[sudo] password for dave:\nINFO:    Remote "company-remote" now in use.\n$ singularity remote list\nCloud Services Endpoints\n========================\n\nNAME            URI                     ACTIVE  GLOBAL  EXCLUSIVE\nSylabsCloud     cloud.sylabs.io         NO      YES     NO\ncompany-remote  enterprise.example.com  YES     YES     YES\nmyremote        enterprise.example.com  NO      NO      NO\n\nKeyservers\n==========\n\nURI                       GLOBAL  INSECURE  ORDER\nhttps://keys.example.com  YES     NO        1*\n\n* Active cloud services keyserver\n')),(0,a.kt)("p",null,"For more details on the ",(0,a.kt)("inlineCode",{parentName:"p"},"remote")," command group and managing remote endpoints,\nplease check the ",(0,a.kt)("inlineCode",{parentName:"p"},"Remote Userdocs <https://www.sylabs.io/guides/\\{userversion\\}/user-guide/endpoint.html>"),"_."),(0,a.kt)("p",null,".. note::"),(0,a.kt)("p",null,"   Once users login to a system wide endpoint, a copy of the endpoint will be listed in\na their ",(0,a.kt)("inlineCode",{parentName:"p"},"~/.singularity/remote.yaml")," file. This means modifications or removal of\nthe system-wide endpoint will not be reflected in the users configuration unless they\nremove the endpoint themselves."),(0,a.kt)("h1",{id:"keyserver-configuration"},"Keyserver Configuration"),(0,a.kt)("p",null,"By default, Singularity will use the keyserver correlated to the active cloud\nservice endpoint. This behavior can be changed or supplemented via the\n",(0,a.kt)("inlineCode",{parentName:"p"},"add-keyserver")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"remove-keyserver")," commands. These commands allow an\nadministrator to create a global list of key servers used to verify container\nsignatures by default."),(0,a.kt)("p",null,"For more details on the ",(0,a.kt)("inlineCode",{parentName:"p"},"remote")," command group and managing keyservers,\nplease check the ",(0,a.kt)("inlineCode",{parentName:"p"},"Remote Userdocs <https://www.sylabs.io/guides/\\{userversion\\}/user-guide/endpoint.html>"),"_."))}u.isMDXComponent=!0}}]);